import InterfaceOption from "../interface/Option";

// store
import Social from '../store/Social'

import Model from "../model";
import View from "../view";
import SocialService from "../service";

const _ = {
  "find": require('lodash.find')
};

/**
 * Creates a new Controller.
 * @constructor
 **/
export class SocialCounter {
  private static _instance: SocialCounter = null;

  private model: Model = new Model();
  private view: View;

  private socialCounters = [];

  constructor(
    option?: InterfaceOption
  ) {
    if (SocialCounter._instance) {
      return SocialCounter._instance;
    } else {
      if(option) {
        this.model.setOption(option);
      }

      this.binding();
    }
  }

  /**
   * 初期化
   * @private
   **/
  private binding(): void {
    this.view = new View((socialCounters) => {
      socialCounters.forEach((socialCounter) => {
        this.socialCounters.push(this.model.createSocialCounter(socialCounter));
      });

      this.requestCountData(this.socialCounters);
    });

    SocialCounter._instance = this;
  }

  /**
   * option をセット
   * @public
   * @param {InterfaceOption} option
   **/
  public setOption(option: InterfaceOption): void {
    this.model.setOption(option);
  }

  /**
   * socialCounters オブジェクトを引数にカウント数をviewに反映
   * @public
   * @param {Social[]} socialCounters
   **/
  public requestCountData(socialCounters: Social[]): void {
    socialCounters.forEach((socialCounter: Social) => {
      new SocialService().sendData(socialCounter)
        .then((responseData) => {
          this.setSocialCount(socialCounter.indexNumber, responseData);

          this.view.setSocialCount(this.socialCounters);
        }).catch((err) => {
        console.error(err);
      });
    });

    console.log(this.socialCounters);
  }

  public setSocialCount(indexNumber: number, responseData): void {
    _.find(this.socialCounters, (social) => {
      if(social.indexNumber === indexNumber) {
        social.setCount(responseData);
      }
    });
  }

  /**
   * データをリセットして初期化
   * @private
   **/
  public rebind() {
    this.socialCounters = [];

    this.view.rebind((socialCounters) => {
      socialCounters.forEach((socialCounter) => {
        this.socialCounters.push(this.model.createSocialCounter(socialCounter));
      });

      this.requestCountData(this.socialCounters);
    });

    SocialCounter._instance = this;
  }
}

export default SocialCounter;
